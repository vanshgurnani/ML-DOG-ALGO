# -*- coding: utf-8 -*-
"""DogEmotionDetectionModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mhUpg7CF7uqw8RjP4IOhRzvg-ESo5DOF

IMPORTING LIBRARIES NECESSARY TO MAKE A TRAINING MODEL TO DETECT DOG EMOTIONS BASED ON IOT DEVICE INPUTS ,i.e. PHYSIOLOGICAL DATA
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Bidirectional, LSTM, Dense, Dropout,Input
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score,f1_score
import seaborn as sns
import matplotlib.pyplot as plt

"""THIS PART OF CODE LOADS AND PERFORMS DATASET PREPROCESSING"""

# Data loading and preprocessing (unchanged)
df = pd.read_excel("dog_emotion_dataset.xlsx")
label_encoder = LabelEncoder()
df["Emotion"] = label_encoder.fit_transform(df["Emotion"])

scaler = MinMaxScaler()
features = ["Heart Rate (bpm)", "Body Temperature (°C)", "Tail Wagging (m/s²)"]
df[features] = scaler.fit_transform(df[features])

X = df[features].values
y = df["Emotion"].values

X = X.reshape((X.shape[0], 1, X.shape[1]))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""THIS IS WHERE MODEL IS BEING TRAINED USING BiLSTM MODEL"""

model = Sequential([
    Input(shape=(X_train.shape[1], X_train.shape[2])),
    Bidirectional(LSTM(64, return_sequences=True)),
    Dropout(0.2),
    Bidirectional(LSTM(32)),
    Dropout(0.2),
    Dense(16, activation='relu'),
    Dense(len(label_encoder.classes_), activation='softmax')
])
model.compile(loss="sparse_categorical_crossentropy",
             optimizer="adam",
             metrics=["accuracy"])

# Verify shapes
print("Input shape:", X_train.shape)
print("Output shape:", model.output_shape)

history = model.fit(X_train, y_train,
                   epochs=50,
                   batch_size=100,
                   validation_data=(X_test, y_test),
                   verbose=1)

"""MODEL IS EVALUATED AFTER TRAINED SUCCESSFULY BELOW. GENERATES F1 SCORE, MODEL ACCURACY, CONFUSION MATRIX

"""

y_pred = model.predict(X_test)
y_pred_classes = y_pred.argmax(axis=1)


accuracy = accuracy_score(y_test, y_pred_classes)
f1 = f1_score(y_test, y_pred_classes, average="weighted")

print(f"Model Accuracy: {accuracy:.4f}\n")
print(f"Model F1 Score: {f1:.4f}")


report = classification_report(y_test, y_pred_classes, target_names=label_encoder.classes_)
print("Classification Report:\n", report)

conf_matrix = confusion_matrix(y_test, y_pred_classes)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.show()

"""PLOTTING THE GRAPH OF ACCURACY AND LOSS

"""

# Plot training loss and accuracy
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()
plt.title("Loss Trend")

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.title("Accuracy Trend")

plt.show()

"""SNIPPET TO SAVE THE MODEL FILE TO LOAD LATER

"""

model.save("dog_emotion_model.h5")

"""SNIPPET ON HOW CAN ONE LOAD OUR MODEL"""

from tensorflow.keras.models import load_model

model = load_model("dog_emotion_model.h5")
model.compile(loss="sparse_categorical_crossentropy", optimizer="adam", metrics=["accuracy"])

"""THIS IS HOW DATA WILL BE GIVEN TO MODEL. AS THIS WILL BE DEPLOYED ON CLOUD, THE DATA WILL BE COMING IN JSON FORMAT."""

real_time_data = {
    "Heart Rate (bpm)": 98,
    "Body Temperature (°C)": 38.41,
    "Tail Wagging (m/s²)": 3.91
}



df_real_time = pd.DataFrame([real_time_data])

df_real_time[["Heart Rate (bpm)", "Body Temperature (°C)", "Tail Wagging (m/s²)"]] = scaler.transform(
    df_real_time[["Heart Rate (bpm)", "Body Temperature (°C)", "Tail Wagging (m/s²)"]])

X_real_time = df_real_time.values.reshape((1, 1, df_real_time.shape[1]))

"""CODE WHICH WILL PREDICT THE EMOTION ALONG WITH CONFIDENCE SCORE"""

y_pred_real_time = model.predict(X_real_time)

predicted_class = y_pred_real_time.argmax(axis=1)[0]
predicted_emotion = label_encoder.inverse_transform([predicted_class])[0]

confidence_score = y_pred_real_time[0][predicted_class]


print(f"Predicted Emotion: {predicted_emotion}")
print(f"Confidence Score: {confidence_score:.4f}")